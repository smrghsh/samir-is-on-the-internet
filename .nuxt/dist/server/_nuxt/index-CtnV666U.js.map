{"version":3,"file":"index-CtnV666U.js","sources":["../../../../assets/shaders/modMeshLine/vertex.glsl","../../../../assets/shaders/modMeshLine/fragment.glsl","../../../../components/twist.vue","../../../../pages/index.vue"],"sourcesContent":["#include <common>\n#include <logdepthbuf_pars_vertex>\n#include <fog_pars_vertex>\n\n\nattribute vec3 previous;\nattribute vec3 next;\nattribute float side;\nattribute float width;\nattribute float counters;\n\nuniform vec2 resolution;\nuniform float lineWidth;\nuniform vec3 color;\nuniform float opacity;\nuniform float sizeAttenuation;\n\n//custom uniforms\nuniform float uTime;\nuniform float speed;\nuniform float offset;\nuniform float amplitude;\nuniform float b;\nuniform float c;\nuniform float d;\nuniform float e;\nuniform float f;\n\nvarying vec2 vUV;\nvarying vec4 vColor;\nvarying float vCounters;\nvarying vec3 vP;\nvec2 fix(vec4 i, float aspect) {\n    vec2 res = i.xy / i.w;\n    res.x *= aspect;\n    vCounters = counters;\n    return res;\n}\n\nvoid main() {\n    float aspect = resolution.x / resolution.y;\n    vColor = vec4(color, opacity);\n    vUV = uv;\n\n    mat4 m = projectionMatrix * modelViewMatrix;\n\n\n\n    vec3 p = vec3(position);\n    vP = p;\n    float o = PI *offset;\n    o += uTime;\n    // p.z += o;\n    float a = amplitude * cos( p.z) ;\n    float x =(p.z * speed +o);\n    p.y += a * sin(b * x + c * sin(d * x - e) + f );\n    p.x += a * cos(b * x + c * sin(d * x - e) * p.z/10.0);\n    //modying position here\n    vec4 finalPosition = m * vec4(p, 1.0);\n    vec4 prevPos = m * vec4(previous, 1.0);\n    vec4 nextPos = m * vec4(next, 1.0);\n\n    vec2 currentP = fix(finalPosition, aspect);\n    vec2 prevP = fix(prevPos, aspect);\n    vec2 nextP = fix(nextPos, aspect);\n\n    float w = lineWidth * width;\n\n    vec2 dir;\n    if (nextP == currentP) dir = normalize(currentP - prevP);\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\n    else {\n    vec2 dir1 = normalize(currentP - prevP);\n    vec2 dir2 = normalize(nextP - currentP);\n    dir = normalize(dir1 + dir2);\n\n    vec2 perp = vec2(-dir1.y, dir1.x);\n    vec2 miter = vec2(-dir.y, dir.x);\n    //w = clamp(w / dot(miter, perp), 0., 4. * lineWidth * width);\n    }\n\n    //vec2 normal = (cross(vec3(dir, 0.), vec3(0., 0., 1.))).xy;\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\n    normal.xy *= .5 * w;\n    //normal *= projectionMatrix;\n    if (sizeAttenuation == 0.) {\n    normal.xy *= finalPosition.w;\n    normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy;\n    }\n\n    finalPosition.xy += normal.xy * side;\n    gl_Position = finalPosition;\n    #include <logdepthbuf_vertex>\n    #include <fog_vertex>\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    #include <fog_vertex>\n}\n\n","\n  #include <fog_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  \n  uniform sampler2D map;\n  uniform sampler2D alphaMap;\n  uniform float useMap;\n  uniform float useAlphaMap;\n  uniform float useDash;\n  uniform float dashArray;\n  uniform float dashOffset;\n  uniform float dashRatio;\n  uniform float visibility;\n  uniform float alphaTest;\n  uniform vec2 repeat;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  varying vec3 vP;\n  uniform float uTime;\n  \n  void main() {\n    #include <logdepthbuf_fragment>\n    vec4 c = vColor;\n    c.r = sin(vP.z);\n    c.a = 0.7;\n    if (useMap == 1.) c *= texture2D(map, vUV * repeat);\n    if (useAlphaMap == 1.) c.a *= texture2D(alphaMap, vUV * repeat).a;\n    if (c.a < alphaTest) discard;\n    if (useDash == 1.) {\n      c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\n    }\n    gl_FragColor = c;\n    gl_FragColor.a *= step(vCounters, visibility);\n    #include <fog_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }","<script>\nimport * as THREE from \"three\";\nimport { MeshLineGeometry, MeshLineMaterial, raycast } from \"meshline\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\n// import * as dat from 'dat.gui'\nimport modMeshLineVertexShader from \"../assets/shaders/modMeshLine/vertex.glsl\";\nimport modMeshLineFragmentShader from \"../assets/shaders/modMeshLine/fragment.glsl\";\nimport { Font, SubtractiveBlending } from \"three\";\n\nexport default {\n  // unmount() {\n    // leo says destroy it here\n  // }\n  mounted() {\n    const sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n      /**\n     * Sizes\n     */\n  // Window resizing\n    window.addEventListener(\"resize\", () => {\n      // Update sizes\n      sizes.width = window.innerWidth;\n      sizes.height = window.innerHeight;\n\n      // Update camera\n      camera.aspect = sizes.width / sizes.height;\n      camera.updateProjectionMatrix();\n\n      // Update renderer\n      renderer.setSize(sizes.width, sizes.height);\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    });\n\n\n//Palette\nconst backgroundColor = new THREE.Color(\"beige\");\n// const backgroundColor = new THREE.Color(\"black\")\n// const backgroundColor = new THREE.Color(\"#D9B9AD\");\n\n/**\n * Base\n */\n\n// Canvas\nconst canvas = document.querySelector(\"canvas.webgl\");\n\n// Scene\nconst scene = new THREE.Scene();\nscene.background = backgroundColor;\n\n/**\n * AxesHelper\n */\n// const axesHelper = new THREE.AxesHelper()\n// scene.add(axesHelper)\n\n/**\n * Camera\n */\n// Base camera\nconst camera = new THREE.PerspectiveCamera(\n  35,\n  sizes.width / sizes.height,\n  0.1,\n  120\n);\ncamera.position.set(-1.526809290138386, 2.933433136629435, 2.2502940751091676);\ncamera.rotation.set(\n  -0.9164283978958037,\n  -0.3916373693287119,\n  -0.46170863682209606\n);\n// camera.position.set\n// (4,\n//     6,\n//     4)\n// camera.rotation.set(-0.9164283978958037,-0.3916373693287119,-0.46170863682209606)\n// camera.lookAt(0,0,0)\nconst controls = new OrbitControls(camera, canvas);\n\nscene.add(camera);\n\n// for debugging purposes\nwindow.camera = camera;\n\n// x: -1.5268092901383867, y: 2.933433136629435, z: 2.2502940751091676\n// _x: -0.9164283978958037, _y: -0.3916373693287119, _z: -0.46170863682209606\n\n/** weave */\n\n/**\n * Parameterization\n */\n\n//a\nconst amplitude = 1.0;\n\nconst lineLength = 8;\nconst points = [];\nconst size = [];\nfor (let i = -lineLength; i < lineLength; i += 0.01) {\n  points.push(new THREE.Vector3(0, 0, i));\n}\nconst geometry = new MeshLineGeometry();\ngeometry.setPoints(points, (p) => Math.sin(p) / 5);\nconst material = new MeshLineMaterial({\n  side: THREE.DoubleSide,\n  color: new THREE.Color(0.8, 0.1, 0.3),\n});\n//https://stackoverflow.com/questions/59548828/how-to-give-vertex-shader-to-a-geometry-without-changing-the-material-in-threejs\nmaterial.onBeforeCompile = function (info) {\n  // console.log(info.fragmentShader)\n  info.vertexShader = modMeshLineVertexShader;\n  info.fragmentShader = modMeshLineFragmentShader;\n  info.uniforms.uTime = { value: 0.0 };\n  info.uniforms.offset = { value: 0.0 };\n  info.uniforms.speed = { value: 1.0 };\n\n  info.uniforms.amplitude = { value: 1.0 };\n  info.uniforms.b = { value: 0.8 };\n  info.uniforms.c = { value: 0.8 };\n  info.uniforms.d = { value: 0.8 };\n  info.uniforms.e = { value: 0.8 };\n  info.uniforms.f = { value: 0.8 }; //offset\n  // console.log(info.uniforms)\n  // change info.vertexShader, info.fragmentShader, and/or info.uniforms here\n  // console.log(info.vertexShader)\n};\n\nfor (let i = 0; i < 2 * Math.PI; i += (2 * Math.PI) / 40) {\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.rotation.y += Math.PI / 2;\n  mesh.rotation.z = i;\n  mesh.position.y += Math.random() * 0.1;\n  mesh.position.z += Math.random() * 0.1;\n  mesh.position.x += Math.random() * 0.1;\n  scene.add(mesh);\n}\n// const mesh = new THREE.Mesh(geometry,material)\n// scene.add(mesh)\n// mesh.rotation.y += Math.PI/2\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n  canvas: canvas,\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n\n// sliders\n/*\nvar slider = document.getElementById(\"myRange\");\nvar output = document.getElementById(\"demo\");\noutput.innerHTML = slider.value; // Display the default slider value\n\n// Update the current slider value (each time you drag the slider handle)\nslider.oninput = function() {\n  output.innerHTML = this.value;\n} \n*/\n\n// var aSlider = document.getElementById(\"a\");\n// aSlider.oninput = function () {\n//   if (material.uniforms.amplitude) {\n//     material.uniforms.amplitude.value = this.value;\n//   }\n// };\n\n// var bSlider = document.getElementById(\"b\");\n// bSlider.oninput = function () {\n//   if (material.uniforms.b) {\n//     material.uniforms.b.value = this.value;\n//   }\n// };\n\n// var cSlider = document.getElementById(\"c\");\n// cSlider.oninput = function () {\n//   if (material.uniforms.c) {\n//     material.uniforms.c.value = this.value;\n//   }\n// };\n// var dSlider = document.getElementById(\"d\");\n// dSlider.oninput = function () {\n//   if (material.uniforms.d) {\n//     material.uniforms.d.value = this.value;\n//   }\n// };\n// var eSlider = document.getElementById(\"e\");\n// eSlider.oninput = function () {\n//   if (material.uniforms.e) {\n//     material.uniforms.e.value = this.value;\n//   }\n// };\n// var fSlider = document.getElementById(\"f\");\n// fSlider.oninput = function () {\n//   if (material.uniforms.f) {\n//     material.uniforms.f.value = this.value;\n//   }\n// };\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock();\nconst tick = () => {\n  const e = clock.getElapsedTime() * 0.5;\n\n  if (material.uniforms.uTime) {\n    material.uniforms.uTime.value = e;\n  }\n\n  renderer.render(scene, camera);\n  window.requestAnimationFrame(tick);\n};\n\ntick();\n\n\n\n\n  }\n}\n\n\n</script>\n\n\n\n<template>\n  <canvas class=\"webgl\" />\n</template>\n\n<style>\n    canvas {\n        width: 100vw;\n        height: 100vh;\n        /* background-color: ; */\n        /* background-color: aqua; */\n        position:fixed;\n        outline: none;\n        z-index: -1;\n    }\n</style>","<template>\n\n  <twist />\n\n  <div class=\"front-layer\">\n    <navbar />\n    <corner-section>\n      <h1>hello world!</h1>\n      <div class=\"not-the-heading\">\n        <ContentDoc :head=\"false\" class=\"text\" path=\"/hello-world\">\n        </ContentDoc>\n        <!-- <main>\n          <h3 class=\"project-demarcator\">Selected Projects</h3>\n          <ProjectsContainer />\n        </main> -->\n      </div>\n\n    </corner-section>\n  </div>\n\n\n\n\n</template>\n\n<style>\n.front-layer {\n  width: 100vw;\n  /* height: 100vh; */\n  position: absolute;\n  z-index: 2;\n}\n\nmain {\n  position: relative;\n}\n\n.project-demarcator {\n  width: 300px;\n  background-color: none;\n  /* background-color: blue; */\n  background-image: linear-gradient(to bottom right, rgba(245, 245, 222, 1.0), rgba(245, 245, 222, 0.0));\n  border-left: 1px solid black;\n  border-top: 1px solid black;\n  /* border-bottom: none; */\n  padding-left: 0.7em;\n  padding-top: 0.3em;\n  padding-bottom: 2em;\n  margin-top: 0.5em;\n  font-size: 1.5em;\n  z-index: 1;\n  position: absolute;\n  /* top left corner is rounded 10px */\n  border-top-left-radius: 10px;\n  /* background blur 10 */\n  backdrop-filter: blur(10px);\n\n}\n</style>"],"names":["_sfc_main","modMeshLineVertexShader","modMeshLineFragmentShader","_ssrRenderAttrs","_mergeProps","_ssrRenderComponent","_withCtx","_push","_parent","_createVNode"],"mappings":"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"}