{
  "resolvedId": "/Users/vertex/code/samir-is-on-the-internet/assets/shaders/modMeshLine/vertex.glsl",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "#include <common>\n#include <logdepthbuf_pars_vertex>\n#include <fog_pars_vertex>\n\n\nattribute vec3 previous;\nattribute vec3 next;\nattribute float side;\nattribute float width;\nattribute float counters;\n\nuniform vec2 resolution;\nuniform float lineWidth;\nuniform vec3 color;\nuniform float opacity;\nuniform float sizeAttenuation;\n\n//custom uniforms\nuniform float uTime;\nuniform float speed;\nuniform float offset;\nuniform float amplitude;\nuniform float b;\nuniform float c;\nuniform float d;\nuniform float e;\nuniform float f;\n\nvarying vec2 vUV;\nvarying vec4 vColor;\nvarying float vCounters;\nvarying vec3 vP;\nvec2 fix(vec4 i, float aspect) {\n    vec2 res = i.xy / i.w;\n    res.x *= aspect;\n    vCounters = counters;\n    return res;\n}\n\nvoid main() {\n    float aspect = resolution.x / resolution.y;\n    vColor = vec4(color, opacity);\n    vUV = uv;\n\n    mat4 m = projectionMatrix * modelViewMatrix;\n\n\n\n    vec3 p = vec3(position);\n    vP = p;\n    float o = PI *offset;\n    o += uTime;\n    // p.z += o;\n    float a = amplitude * cos( p.z) ;\n    float x =(p.z * speed +o);\n    p.y += a * sin(b * x + c * sin(d * x - e) + f );\n    p.x += a * cos(b * x + c * sin(d * x - e) * p.z/10.0);\n    //modying position here\n    vec4 finalPosition = m * vec4(p, 1.0);\n    vec4 prevPos = m * vec4(previous, 1.0);\n    vec4 nextPos = m * vec4(next, 1.0);\n\n    vec2 currentP = fix(finalPosition, aspect);\n    vec2 prevP = fix(prevPos, aspect);\n    vec2 nextP = fix(nextPos, aspect);\n\n    float w = lineWidth * width;\n\n    vec2 dir;\n    if (nextP == currentP) dir = normalize(currentP - prevP);\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\n    else {\n    vec2 dir1 = normalize(currentP - prevP);\n    vec2 dir2 = normalize(nextP - currentP);\n    dir = normalize(dir1 + dir2);\n\n    vec2 perp = vec2(-dir1.y, dir1.x);\n    vec2 miter = vec2(-dir.y, dir.x);\n    //w = clamp(w / dot(miter, perp), 0., 4. * lineWidth * width);\n    }\n\n    //vec2 normal = (cross(vec3(dir, 0.), vec3(0., 0., 1.))).xy;\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\n    normal.xy *= .5 * w;\n    //normal *= projectionMatrix;\n    if (sizeAttenuation == 0.) {\n    normal.xy *= finalPosition.w;\n    normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy;\n    }\n\n    finalPosition.xy += normal.xy * side;\n    gl_Position = finalPosition;\n    #include <logdepthbuf_vertex>\n    #include <fog_vertex>\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    #include <fog_vertex>\n}\n\n",
      "start": 1712037250376,
      "end": 1712037250388,
      "sourcemaps": null
    },
    {
      "name": "vite-plugin-glsl",
      "result": "var vertex_default=\"#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <fog_pars_vertex>\\n\\nattribute vec3 previous;\\nattribute vec3 next;\\nattribute float side;\\nattribute float width;\\nattribute float counters;\\n\\nuniform vec2 resolution;\\nuniform float lineWidth;\\nuniform vec3 color;\\nuniform float opacity;\\nuniform float sizeAttenuation;\\n\\nuniform float uTime;\\nuniform float speed;\\nuniform float offset;\\nuniform float amplitude;\\nuniform float b;\\nuniform float c;\\nuniform float d;\\nuniform float e;\\nuniform float f;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\nvarying float vCounters;\\nvarying vec3 vP;\\nvec2 fix(vec4 i, float aspect) {\\n    vec2 res = i.xy / i.w;\\n    res.x *= aspect;\\n    vCounters = counters;\\n    return res;\\n}\\n\\nvoid main() {\\n    float aspect = resolution.x / resolution.y;\\n    vColor = vec4(color, opacity);\\n    vUV = uv;\\n\\n    mat4 m = projectionMatrix * modelViewMatrix;\\n\\n    vec3 p = vec3(position);\\n    vP = p;\\n    float o = PI *offset;\\n    o += uTime;\\n    \\n    float a = amplitude * cos( p.z) ;\\n    float x =(p.z * speed +o);\\n    p.y += a * sin(b * x + c * sin(d * x - e) + f );\\n    p.x += a * cos(b * x + c * sin(d * x - e) * p.z/10.0);\\n    \\n    vec4 finalPosition = m * vec4(p, 1.0);\\n    vec4 prevPos = m * vec4(previous, 1.0);\\n    vec4 nextPos = m * vec4(next, 1.0);\\n\\n    vec2 currentP = fix(finalPosition, aspect);\\n    vec2 prevP = fix(prevPos, aspect);\\n    vec2 nextP = fix(nextPos, aspect);\\n\\n    float w = lineWidth * width;\\n\\n    vec2 dir;\\n    if (nextP == currentP) dir = normalize(currentP - prevP);\\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\\n    else {\\n    vec2 dir1 = normalize(currentP - prevP);\\n    vec2 dir2 = normalize(nextP - currentP);\\n    dir = normalize(dir1 + dir2);\\n\\n    vec2 perp = vec2(-dir1.y, dir1.x);\\n    vec2 miter = vec2(-dir.y, dir.x);\\n    \\n    }\\n\\n    \\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\\n    normal.xy *= .5 * w;\\n    \\n    if (sizeAttenuation == 0.) {\\n    normal.xy *= finalPosition.w;\\n    normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy;\\n    }\\n\\n    finalPosition.xy += normal.xy * side;\\n    gl_Position = finalPosition;\\n    #include <logdepthbuf_vertex>\\n    #include <fog_vertex>\\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\\n    #include <fog_vertex>\\n}\";export{vertex_default as default};\n",
      "start": 1712037250388,
      "end": 1712037250397,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/vertex/code/samir-is-on-the-internet/assets/shaders/modMeshLine/vertex.glsl"
        ],
        "sourcesContent": [
          "#include <common>\n#include <logdepthbuf_pars_vertex>\n#include <fog_pars_vertex>\n\nattribute vec3 previous;\nattribute vec3 next;\nattribute float side;\nattribute float width;\nattribute float counters;\n\nuniform vec2 resolution;\nuniform float lineWidth;\nuniform vec3 color;\nuniform float opacity;\nuniform float sizeAttenuation;\n\nuniform float uTime;\nuniform float speed;\nuniform float offset;\nuniform float amplitude;\nuniform float b;\nuniform float c;\nuniform float d;\nuniform float e;\nuniform float f;\n\nvarying vec2 vUV;\nvarying vec4 vColor;\nvarying float vCounters;\nvarying vec3 vP;\nvec2 fix(vec4 i, float aspect) {\n    vec2 res = i.xy / i.w;\n    res.x *= aspect;\n    vCounters = counters;\n    return res;\n}\n\nvoid main() {\n    float aspect = resolution.x / resolution.y;\n    vColor = vec4(color, opacity);\n    vUV = uv;\n\n    mat4 m = projectionMatrix * modelViewMatrix;\n\n    vec3 p = vec3(position);\n    vP = p;\n    float o = PI *offset;\n    o += uTime;\n    \n    float a = amplitude * cos( p.z) ;\n    float x =(p.z * speed +o);\n    p.y += a * sin(b * x + c * sin(d * x - e) + f );\n    p.x += a * cos(b * x + c * sin(d * x - e) * p.z/10.0);\n    \n    vec4 finalPosition = m * vec4(p, 1.0);\n    vec4 prevPos = m * vec4(previous, 1.0);\n    vec4 nextPos = m * vec4(next, 1.0);\n\n    vec2 currentP = fix(finalPosition, aspect);\n    vec2 prevP = fix(prevPos, aspect);\n    vec2 nextP = fix(nextPos, aspect);\n\n    float w = lineWidth * width;\n\n    vec2 dir;\n    if (nextP == currentP) dir = normalize(currentP - prevP);\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\n    else {\n    vec2 dir1 = normalize(currentP - prevP);\n    vec2 dir2 = normalize(nextP - currentP);\n    dir = normalize(dir1 + dir2);\n\n    vec2 perp = vec2(-dir1.y, dir1.x);\n    vec2 miter = vec2(-dir.y, dir.x);\n    \n    }\n\n    \n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\n    normal.xy *= .5 * w;\n    \n    if (sizeAttenuation == 0.) {\n    normal.xy *= finalPosition.w;\n    normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy;\n    }\n\n    finalPosition.xy += normal.xy * side;\n    gl_Position = finalPosition;\n    #include <logdepthbuf_vertex>\n    #include <fog_vertex>\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    #include <fog_vertex>\n}"
        ],
        "mappings": "AAAA",
        "names": []
      }
    },
    {
      "name": "vite-plugin-glsl",
      "result": "var vertex_default=\"#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <fog_pars_vertex>\\n\\nattribute vec3 previous;\\nattribute vec3 next;\\nattribute float side;\\nattribute float width;\\nattribute float counters;\\n\\nuniform vec2 resolution;\\nuniform float lineWidth;\\nuniform vec3 color;\\nuniform float opacity;\\nuniform float sizeAttenuation;\\n\\nuniform float uTime;\\nuniform float speed;\\nuniform float offset;\\nuniform float amplitude;\\nuniform float b;\\nuniform float c;\\nuniform float d;\\nuniform float e;\\nuniform float f;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\nvarying float vCounters;\\nvarying vec3 vP;\\nvec2 fix(vec4 i, float aspect) {\\n    vec2 res = i.xy / i.w;\\n    res.x *= aspect;\\n    vCounters = counters;\\n    return res;\\n}\\n\\nvoid main() {\\n    float aspect = resolution.x / resolution.y;\\n    vColor = vec4(color, opacity);\\n    vUV = uv;\\n\\n    mat4 m = projectionMatrix * modelViewMatrix;\\n\\n    vec3 p = vec3(position);\\n    vP = p;\\n    float o = PI *offset;\\n    o += uTime;\\n    \\n    float a = amplitude * cos( p.z) ;\\n    float x =(p.z * speed +o);\\n    p.y += a * sin(b * x + c * sin(d * x - e) + f );\\n    p.x += a * cos(b * x + c * sin(d * x - e) * p.z/10.0);\\n    \\n    vec4 finalPosition = m * vec4(p, 1.0);\\n    vec4 prevPos = m * vec4(previous, 1.0);\\n    vec4 nextPos = m * vec4(next, 1.0);\\n\\n    vec2 currentP = fix(finalPosition, aspect);\\n    vec2 prevP = fix(prevPos, aspect);\\n    vec2 nextP = fix(nextPos, aspect);\\n\\n    float w = lineWidth * width;\\n\\n    vec2 dir;\\n    if (nextP == currentP) dir = normalize(currentP - prevP);\\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\\n    else {\\n    vec2 dir1 = normalize(currentP - prevP);\\n    vec2 dir2 = normalize(nextP - currentP);\\n    dir = normalize(dir1 + dir2);\\n\\n    vec2 perp = vec2(-dir1.y, dir1.x);\\n    vec2 miter = vec2(-dir.y, dir.x);\\n    \\n    }\\n\\n    \\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\\n    normal.xy *= .5 * w;\\n    \\n    if (sizeAttenuation == 0.) {\\n    normal.xy *= finalPosition.w;\\n    normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy;\\n    }\\n\\n    finalPosition.xy += normal.xy * side;\\n    gl_Position = finalPosition;\\n    #include <logdepthbuf_vertex>\\n    #include <fog_vertex>\\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\\n    #include <fog_vertex>\\n}\";export{vertex_default as default};\n",
      "start": 1712037250388,
      "end": 1712037250397,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/vertex/code/samir-is-on-the-internet/assets/shaders/modMeshLine/vertex.glsl"
        ],
        "sourcesContent": [
          "#include <common>\n#include <logdepthbuf_pars_vertex>\n#include <fog_pars_vertex>\n\nattribute vec3 previous;\nattribute vec3 next;\nattribute float side;\nattribute float width;\nattribute float counters;\n\nuniform vec2 resolution;\nuniform float lineWidth;\nuniform vec3 color;\nuniform float opacity;\nuniform float sizeAttenuation;\n\nuniform float uTime;\nuniform float speed;\nuniform float offset;\nuniform float amplitude;\nuniform float b;\nuniform float c;\nuniform float d;\nuniform float e;\nuniform float f;\n\nvarying vec2 vUV;\nvarying vec4 vColor;\nvarying float vCounters;\nvarying vec3 vP;\nvec2 fix(vec4 i, float aspect) {\n    vec2 res = i.xy / i.w;\n    res.x *= aspect;\n    vCounters = counters;\n    return res;\n}\n\nvoid main() {\n    float aspect = resolution.x / resolution.y;\n    vColor = vec4(color, opacity);\n    vUV = uv;\n\n    mat4 m = projectionMatrix * modelViewMatrix;\n\n    vec3 p = vec3(position);\n    vP = p;\n    float o = PI *offset;\n    o += uTime;\n    \n    float a = amplitude * cos( p.z) ;\n    float x =(p.z * speed +o);\n    p.y += a * sin(b * x + c * sin(d * x - e) + f );\n    p.x += a * cos(b * x + c * sin(d * x - e) * p.z/10.0);\n    \n    vec4 finalPosition = m * vec4(p, 1.0);\n    vec4 prevPos = m * vec4(previous, 1.0);\n    vec4 nextPos = m * vec4(next, 1.0);\n\n    vec2 currentP = fix(finalPosition, aspect);\n    vec2 prevP = fix(prevPos, aspect);\n    vec2 nextP = fix(nextPos, aspect);\n\n    float w = lineWidth * width;\n\n    vec2 dir;\n    if (nextP == currentP) dir = normalize(currentP - prevP);\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\n    else {\n    vec2 dir1 = normalize(currentP - prevP);\n    vec2 dir2 = normalize(nextP - currentP);\n    dir = normalize(dir1 + dir2);\n\n    vec2 perp = vec2(-dir1.y, dir1.x);\n    vec2 miter = vec2(-dir.y, dir.x);\n    \n    }\n\n    \n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\n    normal.xy *= .5 * w;\n    \n    if (sizeAttenuation == 0.) {\n    normal.xy *= finalPosition.w;\n    normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy;\n    }\n\n    finalPosition.xy += normal.xy * side;\n    gl_Position = finalPosition;\n    #include <logdepthbuf_vertex>\n    #include <fog_vertex>\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    #include <fog_vertex>\n}"
        ],
        "mappings": "AAAA",
        "names": []
      }
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    }
  ]
}
