{
  "resolvedId": "/Users/vertex/code/samir-is-on-the-internet/assets/shaders/modMeshLine/fragment.glsl",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\n  #include <fog_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  \n  uniform sampler2D map;\n  uniform sampler2D alphaMap;\n  uniform float useMap;\n  uniform float useAlphaMap;\n  uniform float useDash;\n  uniform float dashArray;\n  uniform float dashOffset;\n  uniform float dashRatio;\n  uniform float visibility;\n  uniform float alphaTest;\n  uniform vec2 repeat;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  varying vec3 vP;\n  uniform float uTime;\n  \n  void main() {\n    #include <logdepthbuf_fragment>\n    vec4 c = vColor;\n    c.r = sin(vP.z);\n    c.a = 0.7;\n    if (useMap == 1.) c *= texture2D(map, vUV * repeat);\n    if (useAlphaMap == 1.) c.a *= texture2D(alphaMap, vUV * repeat).a;\n    if (c.a < alphaTest) discard;\n    if (useDash == 1.) {\n      c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\n    }\n    gl_FragColor = c;\n    gl_FragColor.a *= step(vCounters, visibility);\n    #include <fog_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }",
      "start": 1712037250376,
      "end": 1712037250388,
      "sourcemaps": null
    },
    {
      "name": "vite-plugin-glsl",
      "result": "var fragment_default=\"#include <fog_pars_fragment>\\n  #include <logdepthbuf_pars_fragment>\\n  \\n  uniform sampler2D map;\\n  uniform sampler2D alphaMap;\\n  uniform float useMap;\\n  uniform float useAlphaMap;\\n  uniform float useDash;\\n  uniform float dashArray;\\n  uniform float dashOffset;\\n  uniform float dashRatio;\\n  uniform float visibility;\\n  uniform float alphaTest;\\n  uniform vec2 repeat;\\n  \\n  varying vec2 vUV;\\n  varying vec4 vColor;\\n  varying float vCounters;\\n  varying vec3 vP;\\n  uniform float uTime;\\n  \\n  void main() {\\n    #include <logdepthbuf_fragment>\\n    vec4 c = vColor;\\n    c.r = sin(vP.z);\\n    c.a = 0.7;\\n    if (useMap == 1.) c *= texture2D(map, vUV * repeat);\\n    if (useAlphaMap == 1.) c.a *= texture2D(alphaMap, vUV * repeat).a;\\n    if (c.a < alphaTest) discard;\\n    if (useDash == 1.) {\\n      c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\\n    }\\n    gl_FragColor = c;\\n    gl_FragColor.a *= step(vCounters, visibility);\\n    #include <fog_fragment>\\n    #include <tonemapping_fragment>\\n    #include <encodings_fragment>\\n  }\";export{fragment_default as default};\n",
      "start": 1712037250388,
      "end": 1712037250397,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/vertex/code/samir-is-on-the-internet/assets/shaders/modMeshLine/fragment.glsl"
        ],
        "sourcesContent": [
          "#include <fog_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  \n  uniform sampler2D map;\n  uniform sampler2D alphaMap;\n  uniform float useMap;\n  uniform float useAlphaMap;\n  uniform float useDash;\n  uniform float dashArray;\n  uniform float dashOffset;\n  uniform float dashRatio;\n  uniform float visibility;\n  uniform float alphaTest;\n  uniform vec2 repeat;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  varying vec3 vP;\n  uniform float uTime;\n  \n  void main() {\n    #include <logdepthbuf_fragment>\n    vec4 c = vColor;\n    c.r = sin(vP.z);\n    c.a = 0.7;\n    if (useMap == 1.) c *= texture2D(map, vUV * repeat);\n    if (useAlphaMap == 1.) c.a *= texture2D(alphaMap, vUV * repeat).a;\n    if (c.a < alphaTest) discard;\n    if (useDash == 1.) {\n      c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\n    }\n    gl_FragColor = c;\n    gl_FragColor.a *= step(vCounters, visibility);\n    #include <fog_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }"
        ],
        "mappings": "AAAA",
        "names": []
      }
    },
    {
      "name": "vite-plugin-glsl",
      "result": "var fragment_default=\"#include <fog_pars_fragment>\\n  #include <logdepthbuf_pars_fragment>\\n  \\n  uniform sampler2D map;\\n  uniform sampler2D alphaMap;\\n  uniform float useMap;\\n  uniform float useAlphaMap;\\n  uniform float useDash;\\n  uniform float dashArray;\\n  uniform float dashOffset;\\n  uniform float dashRatio;\\n  uniform float visibility;\\n  uniform float alphaTest;\\n  uniform vec2 repeat;\\n  \\n  varying vec2 vUV;\\n  varying vec4 vColor;\\n  varying float vCounters;\\n  varying vec3 vP;\\n  uniform float uTime;\\n  \\n  void main() {\\n    #include <logdepthbuf_fragment>\\n    vec4 c = vColor;\\n    c.r = sin(vP.z);\\n    c.a = 0.7;\\n    if (useMap == 1.) c *= texture2D(map, vUV * repeat);\\n    if (useAlphaMap == 1.) c.a *= texture2D(alphaMap, vUV * repeat).a;\\n    if (c.a < alphaTest) discard;\\n    if (useDash == 1.) {\\n      c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\\n    }\\n    gl_FragColor = c;\\n    gl_FragColor.a *= step(vCounters, visibility);\\n    #include <fog_fragment>\\n    #include <tonemapping_fragment>\\n    #include <encodings_fragment>\\n  }\";export{fragment_default as default};\n",
      "start": 1712037250388,
      "end": 1712037250397,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/vertex/code/samir-is-on-the-internet/assets/shaders/modMeshLine/fragment.glsl"
        ],
        "sourcesContent": [
          "#include <fog_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  \n  uniform sampler2D map;\n  uniform sampler2D alphaMap;\n  uniform float useMap;\n  uniform float useAlphaMap;\n  uniform float useDash;\n  uniform float dashArray;\n  uniform float dashOffset;\n  uniform float dashRatio;\n  uniform float visibility;\n  uniform float alphaTest;\n  uniform vec2 repeat;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  varying vec3 vP;\n  uniform float uTime;\n  \n  void main() {\n    #include <logdepthbuf_fragment>\n    vec4 c = vColor;\n    c.r = sin(vP.z);\n    c.a = 0.7;\n    if (useMap == 1.) c *= texture2D(map, vUV * repeat);\n    if (useAlphaMap == 1.) c.a *= texture2D(alphaMap, vUV * repeat).a;\n    if (c.a < alphaTest) discard;\n    if (useDash == 1.) {\n      c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\n    }\n    gl_FragColor = c;\n    gl_FragColor.a *= step(vCounters, visibility);\n    #include <fog_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }"
        ],
        "mappings": "AAAA",
        "names": []
      }
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "content-slot",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "server-only-component-transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1712037250397,
      "end": 1712037250397,
      "order": "normal"
    }
  ]
}
